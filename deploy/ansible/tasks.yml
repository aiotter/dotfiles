---
- name: Include vars
  include_vars: vars.yml
  tags: always

- name: Create directories
  file:
    path: "{{ item }}"
    state: directory
  loop:
    - "~/work"
    - "~/.config"

- name: List up dotfiles to link
  find:
    path: "{{ lookup('env', 'DOTPATH') }}"
    hidden: true
    pattern: .*
    excludes:
      - ".DS_Store"
      - "*.swp"
      - ".gitignore"
  register:
    dotfiles
  tags: symlink

- name: Symlink dotfiles
  file:
    src: "{{ item }}"
    dest: "~/{{ item | basename }}"
    state: link
    force: true
  loop: "{{ dotfiles.files | map(attribute='path') | list }}"
  tags: symlink

# Linux configdir path
- when: ansible_os_family != "Darwin"
  set_fact:
    configpaths:
      - "~/.config"
  tags: symlink

# macos configdir path
- when: ansible_os_family == "Darwin"
  set_fact:
    configpaths:
      - "~/.config"
      - "~/Library/Application Support"
  tags: symlink

- name: List up configdir to link
  find:
    path: "{{ lookup('env', 'DOTPATH') }}/.config"
    hidden: true
    file_type: any
  register: configdirs
  tags: symlink

- name: Symlink configdir
  file:
    src: "{{ item.0 }}"
    dest: "{{ item.1 }}/{{ item.0 | basename }}"
    state: link
    force: true
  loop: "{{ configdirs.files | map(attribute='path') | product(configpaths) | list }}"
  tags: symlink

- name: Install Python modules
  pip:
    name: "{{ packages | map(attribute='pip') | select('defined') | list }}"
    executable: "{{ lookup('env', 'HOME_LOCAL') }}/bin/pip3"
  tags: pip

- when: ansible_os_family == "Darwin"
  block:
    - name: Install Homebrew
      command:
        cmd: '/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"'
        creates: /usr/local/bin/brew
      tags: check_brew

    - name: Update Homebrew
      homebrew:
        update_homebrew: true

    - name: Install/Upgrade formulae
      homebrew:
        name: "{{ packages | map(attribute='brew') | select('defined') | list }}"
        state: latest
      tags: brew_formula

    - name: Install/Upgrade HEAD-only formulae
      homebrew:
        name: "{{ packages | map(attribute='brew-head') | select('defined') | list }}"
        state: head
      tags: brew_formula

    - name: Install casks
      homebrew_cask:
        name: "{{ packages | map(attribute='cask') | select('defined') | list }}"
      tags: brew_cask

- when: ansible_os_family == "Archlinux"
  block:
    - name: Install/Upgrade pacman packages
      pacman:
        name: "{{ packages | map(attribute='pacman') | select('defined') | list }}"
        state: latest
        update_cache: yes
      become: true
      tags: pacman

    - name: Install/Upgrade AUR packages
      aur:
        name: "{{ packages | map(attribute='aur') | select('defined') | list }}"
      tags: aur

- name: Install Docker
  import_role: name=install_docker
  tags: docker

- name: Install Go
  import_role: name=install_go
  tags: go

- name: Install Go packages
  shell: "go get -v {{ item }}"
  environment:
    GOPATH: "{{ lookup('env', 'HOME') }}/dev/go"
  loop: "{{ packages | map(attribute='go') | select('defined') | list }}"
  register: result
  changed_when: "result.stdout != ''"
  tags: go

- name: Install Node.js
  import_role: name=install_nodejs
  tags: npm

- name: Install Node.js packages
  npm:
    name: "{{ item }}"
    global: yes
  become: yes
  loop: "{{ packages | map(attribute='npm') | select('defined') | list }}"
  tags: npm

- name: Install tmux plugin manager
  git:
    repo: 'https://github.com/tmux-plugins/tpm.git'
    dest: ~/.tmux/plugins/tpm
  tags: tpm

- name: Install tmux plugins
  shell: "! ~/.tmux/plugins/tpm/bin/install_plugins | grep -v 'Already installed'"
  register: result
  changed_when: "result.stdout != ''"
  tags: tpm

- name: Install vim plugins
  vars:
    dir: ~/.cache/dein/repos
  shell:
    cmd: |
      before=$(find {{ dir }})
      yes | vim +quit >/dev/null
      diff <(echo "$before") <(find {{ dir }}) >/dev/null || echo changed
    executable: /bin/bash
  register: result
  changed_when: "result.stdout != ''"
  tags: vim

- name: Install snippets
  get_url:
    url: "{{ item }}"
    dest: "{{ lookup('env', 'HOME_LOCAL') }}/bin"
    mode: "u=rwx,g=rx,o=rx"
  loop: "{{ packages | map(attribute='snippet') | select('defined') | list }}"
  tags: snippet

- name: Install fonts
  import_role: name=fonts
  tags: font

- name: System settings
  import_role: name=system_settings
  tags: system

- name: Install IME
  import_role: name=ime
  tags: ime

- shell: "cat /etc/shells | grep zsh | tail -1"
  register: zsh_path
  ignore_errors: true
  changed_when: false
  tags: zsh

- name: Install zsh plugins
  command: zsh -i -c -- '@zinit-scheduler'
  environment:
    TERM: linux-m
  register: result
  changed_when: |
    (result.stdout | regex_replace('\\x1B\\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]', '')) != ''
  when: zsh_path is succeeded
  tags: zsh

- name: Change user shell to zsh
  user:
    name: "{{ ansible_user }}"
    shell: "{{ zsh_path.stdout }}"
  when: zsh_path is succeeded
  become: true
  tags: zsh

- debug:
    msg: |
      Install zsh and add its path to /etc/shells.
      Then execute `chsh -s /path/to/zsh`.
  when: zsh_path is failed
  tags: zsh

