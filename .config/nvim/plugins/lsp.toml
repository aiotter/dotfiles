[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add = '''
let g:lsp_auto_enable = 1
let g:lsp_diagnostics_echo_cursor = 1
let g:lsp_diagnostics_float_cursor = 1
let g:lsp_diagnostics_highlights_enabled = 0
let g:lsp_diagnostics_virtual_text_enabled = 0
" let g:lsp_diagnostics_virtual_text_prefix = " â€£ "
let g:lsp_settings_servers_dir=$HOME.'/.cache/vim-lsp-settings/servers'
let g:lsp_signs_enabled = 1

" Execute default K by gK
nnoremap gK K

" Hover definition (invoke with K)
nmap K <Plug>(lsp-hover)

function! s:on_lsp_buffer_enabled() abort
  setlocal omnifunc=lsp#complete
  setlocal signcolumn=yes
  " Set tag source to LSP
  let g:vista_default_executive = 'vim_lsp'
  " Jump to definition
  nmap <buffer> <C-]> <Plug>(lsp-definition)
  " Rename
  nmap <buffer> <LocalLeader>lR <Plug>(lsp-rename)
  " Search refs
  nmap <buffer> <LocalLeader>lr <Plug>(lsp-reference)
  " Output linter results to quickfix
  nmap <buffer> <LocalLeader>ld <Plug>(lsp-document-diagnostics)
  " Prettify
  nmap <buffer> <LocalLeader>lp <Plug>(lsp-document-format)
endfunction

augroup lsp_install
  au!
  autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

" let g:lsp_log_verbose = 1
" let g:lsp_log_file = expand('~/vim-lsp.log')
'''
hook_post_source = '''
" PlatformIO
let s:pio_project_root = lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), "platformio.ini")
if s:pio_project_root->strlen() > 0 && executable("pio") && executable("clangd")
  let s:pio_core = system("pio system info --json-output")->json_decode().core_dir.value
  let s:compile_commands = glob(s:pio_project_root . '/.pio/**/compile_commands.json', 0, 1)->get(0)->fnamemodify(':p:h')

  au User lsp_setup call lsp#register_server({
  \ 'name': 'clangd',
  \ 'cmd': ['clangd', '-background-index',
  \         '--query-driver=' . s:pio_core . '/packages/*/bin/*',
  \         '--compile-commands-dir=' . s:compile_commands,
  \        ],
  \ 'allowlist': ['c', 'cpp', 'objc', 'objcpp', 'cc'],
  \ })
elseif executable("clangd")
  au User lsp_setup call lsp#register_server({
  \ 'name': 'clangd',
  \ 'cmd': ['clangd', '-background-index'],
  \ 'allowlist': ['c', 'cpp', 'objc', 'objcpp', 'cc'],
  \ })
endif

" Nix
if executable('rnix-lsp')
  au User lsp_setup call lsp#register_server({
    \ 'name': 'rnix-lsp',
    \ 'cmd': {server_info->[&shell, &shellcmdflag, 'rnix-lsp']},
    \ 'whitelist': ['nix'],
    \ })
endif
'''


[[plugins]]
# repo = 'mattn/vim-lsp-settings'
repo = '/Users/aiotter/repo/github.com/mattn/vim-lsp-settings'
depends = 'vim-lsp'
hook_add = '''
let g:lsp_settings_filetype_javascript = ['deno', 'typescript-language-server', 'eslint-language-server']
let g:lsp_settings_filetype_typescript = ['deno', 'typescript-language-server', 'eslint-language-server']
let g:lsp_settings_filetype_typescriptreact = ['deno', 'typescript-language-server', 'eslint-language-server']
let g:lsp_settings_filetype_python = 'pyright-langserver'

let g:lsp_settings = {
\   'bash-language-server': {
\     'allowlist': ['sh', 'zsh']
\   },
\   'clangd': {
\     'disabled': v:true
\  }
\}
'''

[[plugins]]
repo = 'liuchengxu/vista.vim'
depends = 'vim-lsp'
hook_add = '''
nnoremap <silent> <Leader>d :<C-u>Vista!!<CR>

let g:vista_sidebar_width = 30
let g:vista_echo_cursor_strategy = 'floating_win'
let g:vista#renderer#enable_icon = 1
let g:vista_default_executive = 'ctags'

" Close window after original buffer was closed
augroup VistaClose
  au!
  au WinEnter * if winnr('$') == 1 && bufname() == "__vista__" |q|endif
augroup END
'''
